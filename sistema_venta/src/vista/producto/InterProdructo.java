package vista.producto;

import java.sql.Connection;
import controlador.producto.Ctrl_Producto;
import controlador.producto.Ctrl_Producto_Nuevo;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import javax.swing.JOptionPane;
import modelo.producto.Producto;
import modelo.producto.ProductoDAO_ImpNuevo;
import modelo.producto.ProductoDAO_Nuevo;

/**
 *
 * @author Guicho
 */
public class InterProdructo extends javax.swing.JInternalFrame {

    int obtenerIdCategoria = 0;

    public InterProdructo() {
        initComponents();
        this.setSize(new Dimension(400, 300));
        this.setTitle("Nuevo producto");

        this.cargarComboCategoria();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txt_nombre = new javax.swing.JTextField();
        txt_cantidad = new javax.swing.JTextField();
        txt_precio = new javax.swing.JTextField();
        txt_descripcion = new javax.swing.JTextField();
        jComboBox_iva = new javax.swing.JComboBox<>();
        jComboBox_categoria = new javax.swing.JComboBox<>();
        jButton_guardar = new javax.swing.JButton();
        jLabel_wallpaper = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel1.setText("Nuevo producto");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 10, -1, -1));

        jLabel2.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Cantidad");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 80, -1, -1));

        jLabel3.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Categoria");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 200, -1, -1));

        jLabel4.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Nombre");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 50, -1, -1));

        jLabel5.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Precio");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 110, -1, -1));

        jLabel6.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Descripción");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 140, -1, -1));

        jLabel7.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("IVA%");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 170, -1, -1));

        txt_nombre.setBackground(new java.awt.Color(35, 44, 92));
        txt_nombre.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        txt_nombre.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(txt_nombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 50, 170, -1));

        txt_cantidad.setBackground(new java.awt.Color(35, 44, 92));
        txt_cantidad.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        txt_cantidad.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(txt_cantidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 80, 170, -1));

        txt_precio.setBackground(new java.awt.Color(35, 44, 92));
        txt_precio.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        txt_precio.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(txt_precio, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 110, 170, -1));

        txt_descripcion.setBackground(new java.awt.Color(35, 44, 92));
        txt_descripcion.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        txt_descripcion.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(txt_descripcion, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 140, 170, -1));

        jComboBox_iva.setBackground(new java.awt.Color(11, 82, 198));
        jComboBox_iva.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jComboBox_iva.setForeground(new java.awt.Color(255, 255, 255));
        jComboBox_iva.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione iva:", "No grava IVA", "12%", "14%" }));
        getContentPane().add(jComboBox_iva, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 170, 170, -1));

        jComboBox_categoria.setBackground(new java.awt.Color(6, 81, 182));
        jComboBox_categoria.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jComboBox_categoria.setForeground(new java.awt.Color(255, 255, 255));
        jComboBox_categoria.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione una categoria:", " " }));
        getContentPane().add(jComboBox_categoria, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 200, 170, -1));

        jButton_guardar.setBackground(new java.awt.Color(75, 70, 132));
        jButton_guardar.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButton_guardar.setText("Guardar");
        jButton_guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_guardarActionPerformed(evt);
            }
        });
        getContentPane().add(jButton_guardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 230, 90, 30));

        jLabel_wallpaper.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/fondo3.jpg"))); // NOI18N
        getContentPane().add(jLabel_wallpaper, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 390, 270));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_guardarActionPerformed
        // TODO add your handling code here:
        Producto producto = new Producto();
        Ctrl_Producto ctrl_Producto = new Ctrl_Producto();
        String iva = "";
        String categoria = "";
        iva = jComboBox_iva.getSelectedItem().toString().trim();
        categoria = jComboBox_categoria.getSelectedItem().toString().trim();

        //Validar campos
        if (txt_nombre.getText().equals("") || txt_cantidad.getText().equals("") || txt_precio.getText().equals("") || txt_descripcion.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Complete todos los campos");
            txt_nombre.setBackground(Color.red);
            txt_cantidad.setBackground(Color.red);
            txt_precio.setBackground(Color.red);
            txt_descripcion.setBackground(Color.red);
        } else {
            //Consulta para ver si el producto ya existe
            ProductoDAO_Nuevo productoDAO_Nuevo = new ProductoDAO_ImpNuevo();
            Ctrl_Producto_Nuevo ctrl_Producto_Nuevo = new Ctrl_Producto_Nuevo(productoDAO_Nuevo);
            
            if (!ctrl_Producto_Nuevo.existeProducto(txt_nombre.getText().trim())) {

                if (iva.equalsIgnoreCase("Seleccione iva:")) {
                    JOptionPane.showMessageDialog(null, "Seleccione un IVA");
                } else {
                    if (categoria.equalsIgnoreCase("Seleccione una categoria:")) {
                        JOptionPane.showMessageDialog(null, "Seleccione una categoria");
                    } else {
                        try {
                            producto.setNombre(txt_nombre.getText().trim());
                            producto.setCantidad(Integer.parseInt(txt_cantidad.getText().trim()));
                            producto.setNombre(txt_nombre.getText().trim());

                            /*
                            Ahora para la variable precio que es double,tenemos que considerar
                            que el usuario es un niño y que puede equivocarse en el uso de los 
                            puntos decimales y en lugar de usar un '.' para separar enteros de
                            decimales, lo hace con ',' (coma), así que ahora vamos a transformar
                            esa coma en un punto para que así podamos insertar los valores en
                            la BD sin ningún contratiempo
                             *//*
                            String precioTXT = "";
                            boolean aux = false;
                            precioTXT = txt_precio.getText().trim();
                            double precio = 0.0;

                            for (int i = 0; i < precioTXT.length(); i++) {
                                if (precioTXT.charAt(i) == ',') {
                                    String precioNuevo = precioTXT.replace(",", ".");
                                    precio = Double.parseDouble(precioNuevo);
                                    aux = true;
                                }
                            }
                            //obtenerPrecioDesdeTexto();
                            //Evaluar 
                            if (aux == true) {
                                producto.setPrecio(precio);
                            } else {
                                precio = Double.parseDouble(precioTXT);
                                producto.setPrecio(precio);
                            }*/

                            String textoPrecio = txt_precio.getText();
                            cargarPrecioEnProducto(textoPrecio,producto);
                            
                            producto.setDescripcion(txt_descripcion.getText().trim());

                            //Porcentaje IVA
                            /*
                            if (iva.equalsIgnoreCase("No grava IVA")) {
                                producto.setPorcentajeIva(0);
                            } else if (iva.equalsIgnoreCase("12%")) {
                                producto.setPorcentajeIva(12);
                            } else if (iva.equalsIgnoreCase("14%")) {
                                producto.setPorcentajeIva(14);
                            }*/
                            int porcentajeIva = obtenerPorcentajeIva(iva);
                            // Aquí puedes utilizar el valor del porcentaje de IVA obtenido, por ejemplo:
                            producto.setPorcentajeIva(porcentajeIva);
                            //Obtener idCategoria - cargar método para obtenerlo
                            
                            producto.setIdCategoria(this.idCategoria(categoria));
                            producto.setEstado(1);

                            if (ctrl_Producto_Nuevo.guardar(producto)) {
                                JOptionPane.showMessageDialog(null, "Resgistro guardado");
                                
                                this.reinicio();
                                
                            } else {
                                JOptionPane.showMessageDialog(null, "Error al guardar");
                            }
                        } catch (HeadlessException | NumberFormatException e) {
                            System.out.println("ERROR EN " + e);
                        }
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "El producto ya está registrado");
            }
        }
    }//GEN-LAST:event_jButton_guardarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_guardar;
    private javax.swing.JComboBox<String> jComboBox_categoria;
    private javax.swing.JComboBox<String> jComboBox_iva;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel_wallpaper;
    private javax.swing.JTextField txt_cantidad;
    private javax.swing.JTextField txt_descripcion;
    private javax.swing.JTextField txt_nombre;
    private javax.swing.JTextField txt_precio;
    // End of variables declaration//GEN-END:variables

    //Método para limpiar formulario
    private void limpiarCampos() {
        txt_nombre.setText("");
        txt_cantidad.setText("");
        txt_descripcion.setText("");
        txt_precio.setText("");
    }

    //Método para cargar las categorias
    /*
    private void cargarComboCategoria() {
        java.sql.Connection con = conexion.Conexion.Conexion();
        String sql = "select * from  tb_categoria";
        Statement st;

        try {
            st = con.createStatement();
            ResultSet rs = st.executeQuery(sql);
            jComboBox_categoria.removeAllItems();
            jComboBox_categoria.addItem("Seleccione una categoria:");

            while (rs.next()) {
                jComboBox_categoria.addItem(rs.getString("descripcion"));
            }
            con.close();

        } catch (SQLException e) {
            System.out.println("Error al categorias " + e);
        }

    }*/

    private void cargarComboCategoria(){
        ProductoDAO_Nuevo productoDAO_Nuevo = new ProductoDAO_ImpNuevo();   //Al igual se instacia un objeto de tipo abstracto que apunta a la clase concreta
        Ctrl_Producto_Nuevo ctrl_Producto_Nuevo = new Ctrl_Producto_Nuevo(productoDAO_Nuevo); //le mandamos la direccion de la clase concreta al controlador
        
        jComboBox_categoria.removeAllItems(); //eliminamos todos los items que hay en el jcomobox
        jComboBox_categoria.addItem("Seleccione una categoria:"); //añadimos el texto por default
    
        List<String> categorias = ctrl_Producto_Nuevo.obtenerCategoria(); //creamos un arrayList de tipo str que recibe el nombre de todas las categorias
        for (String categoria : categorias) { //empezamos el for each
            jComboBox_categoria.addItem(categoria); //añadimos el jcombobox
        }
    }
        
    /*
    private int idCategoria() {
        String sql = "select * from tb_categoria where descripcion = '" + this.jComboBox_categoria.getSelectedItem() + "'";
        Statement st;

        try {
            Connection con = conexion.Conexion.Conexion();
            st = con.createStatement();
            ResultSet rs = st.executeQuery(sql);

            while (rs.next()) {
                obtenerIdCategoria = rs.getInt("idCategoria");
            }
        } catch (SQLException e) {
            System.out.println("Error al obtener id de la categoria " + e);
        }
        return obtenerIdCategoria;
    }*/
    
    private String corregirSeparadorDecimal(String precioTXT) {
        return precioTXT.replace(",", "."); //Se reemplaza la coma por el punto en la cadea recibida
    }
    
    private double obtenerPrecioDesdeTexto(String precioTXT) { //obtenemos el precio del texto y lo devolvemos
        double precio = 0.0;

        try {
            precio = Double.parseDouble(precioTXT);
        } catch (NumberFormatException e) {
            System.out.println("Error al parsear el precio: " + e);
        }

        return precio;
    }
    
    private void cargarPrecioEnProducto(String textoPrecio, Producto producto) { //recibimos el texto y el objeto producto
        String precioTXT = textoPrecio.trim(); //limpiamos el texto de espacios
        boolean aux = false; //declaramos variable de ayuda
        double precio = 0.0;

        for (int i = 0; i < precioTXT.length(); i++) { //declaramos un for que nos ayude a recorrer cada caracter
            if (precioTXT.charAt(i) == ',') { // si en el recorrido encuentra una coma
                precioTXT = corregirSeparadorDecimal(precioTXT); //llamamos al metodo para reemplazar
                precio = obtenerPrecioDesdeTexto(precioTXT); //despues de reemplazar parseamos
                aux = true; //le damos like al proceso
            }
        }

        if (aux) { //si aux es la true 
            producto.setPrecio(precio); //mandamos el precio al objeto
        } else {
            precio = obtenerPrecioDesdeTexto(precioTXT); // si no se llego a encontrar una coma lo parseamos
            producto.setPrecio(precio); //mandamos el precio al objeto
        }
    }
    
    private int obtenerPorcentajeIva(String iva) {
        if (iva.equalsIgnoreCase("No grava IVA")) {
            return 0;
        } else if (iva.equalsIgnoreCase("12%")) {
            return 12;
        }else if(iva.equalsIgnoreCase("14%")) {
            return 14;
        }
        
        return 0;
    }

    private int idCategoria(String descripcion){
        ProductoDAO_Nuevo productoDAO_Nuevo = new ProductoDAO_ImpNuevo();
        Ctrl_Producto_Nuevo ctrl_Producto_Nuevo = new Ctrl_Producto_Nuevo(productoDAO_Nuevo);
        return ctrl_Producto_Nuevo.idCategoria(descripcion);
    }

    private void reinicio(){
        txt_nombre.setBackground(Color.green);
        txt_cantidad.setBackground(Color.green);
        txt_precio.setBackground(Color.green);
        txt_descripcion.setBackground(Color.green);
        this.cargarComboCategoria();
        this.jComboBox_iva.setSelectedItem("Seleccione iva:");
        this.limpiarCampos();
    }
}

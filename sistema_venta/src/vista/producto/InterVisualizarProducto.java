package vista.producto;

import controlador.producto.Ctrl_Producto_Visualizar;
import java.awt.Dimension;
import java.util.List;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import modelo.producto.Producto;
import modelo.producto.ProductoDAO_ImpVisualizar;
import modelo.producto.ProductoDAO_Visualizar;

/**
 *
 * @author Guicho
 */
public class InterVisualizarProducto extends javax.swing.JInternalFrame {

    private int idProducto;
    int obtenerIdCategoriaCombo = 0;
    private final ProductoDAO_Visualizar productoDAO_Visualizar = new ProductoDAO_ImpVisualizar();
    private final Ctrl_Producto_Visualizar ctrl_Producto_Visualizar = new Ctrl_Producto_Visualizar(productoDAO_Visualizar);
    public InterVisualizarProducto() {
        initComponents();
        this.setSize(new Dimension(900, 500));
        this.setTitle("Gestionar Productos");
        //Cargar tabla
        this.CargarTablaProductos();
        //this.CargarComboCategoria();

        //insertar imagen en nuestro JLabel
        ImageIcon wallpaper = new ImageIcon("src/img/fondo3.jpg");
        Icon icono = new ImageIcon(wallpaper.getImage().getScaledInstance(900, 500, WIDTH));
        jLabel_wallpaper.setIcon(icono);
        this.repaint();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_productos = new javax.swing.JTable();
        jLabel_wallpaper = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Visualizar Productos");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 20, -1, -1));

        jPanel1.setBackground(new java.awt.Color(195, 139, 11));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable_productos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable_productos);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 710, 250));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 60, 730, 270));
        getContentPane().add(jLabel_wallpaper, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 890, 470));

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel_wallpaper;
    private javax.swing.JPanel jPanel1;
    public static javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTable jTable_productos;
    // End of variables declaration//GEN-END:variables

    /*
     * *****************************************************
     * metodo para limpiar
     * *****************************************************
     */
 /*
    private void Limpiar() {
        txt_nombre.setText("");
        txt_cantidad.setText("");
        txt_precio.setText("");
        txt_descripcion.setText("");
        jComboBox_iva.setSelectedItem("Seleccione iva:");
        jComboBox_categoria.setSelectedItem("Seleccione categoria:");
    }*/

 /*
     * *****************************************************
     * metodo para cargar las categorias en el JCombox
     * *****************************************************
     */
 /*
    private void CargarComboCategoria() {
        Connection con = Conexion.Conexion();
        String sql = "select * from tb_categoria";
        Statement st;
        try {

            st = con.createStatement();
            ResultSet rs = st.executeQuery(sql);
            jComboBox_categoria.removeAllItems();
            jComboBox_categoria.addItem("Seleccione categoria:");
            while (rs.next()) {
                jComboBox_categoria.addItem(rs.getString("descripcion"));
            }
            con.close();

        } catch (SQLException e) {
            System.out.println("¡Error al cargar categorias!");
        }
    }*/

 /*
     * *****************************************************
     * metodo para mostrar todos los productos registrados
     * *****************************************************
     */
    //String descripcionCategoria = "";
    /*
    private void CargarTablaProductos() {
        Connection con = Conexion.Conexion();
        DefaultTableModel model = new DefaultTableModel();
        String sql = "select p.idProducto, p.nombre, p.cantidad, p.precio, p.descripcion, p.porcentajeIva, c.descripcion, p.estado from tb_producto As p, tb_categoria As c where p.idCategoria = c.idCategoria;";
        Statement st;
        try {
            st = con.createStatement();
            ResultSet rs = st.executeQuery(sql);
            InterVisualizarProducto.jTable_productos = new JTable(model);
            InterVisualizarProducto.jScrollPane1.setViewportView(InterVisualizarProducto.jTable_productos);

            model.addColumn("N°");//ID
            model.addColumn("nombre");
            model.addColumn("cantidad");
            model.addColumn("precio");
            model.addColumn("descripcion");
            model.addColumn("Iva");
            model.addColumn("Categoria");
            model.addColumn("estado");

            while (rs.next()) {

                precio = rs.getDouble("precio");
                porcentajeIva = rs.getInt("porcentajeIva");

                Object fila[] = new Object[8];
                for (int i = 0; i < 8; i++) {

                    if (i == 5) {
                        this.calcularIva(precio, porcentajeIva);//metodo
                        fila[i] = IVA;
                        rs.getObject(i + 1);
                    } else {
                        fila[i] = rs.getObject(i + 1);
                    }
                }
                model.addRow(fila);
            }
            con.close();
        } catch (SQLException e) {
            System.out.println("Error al llenar la tabla productos: " + e);
        }/*
        //evento para obtener campo al cual el usuario da click
        //y obtener la interfaz que mostrara la informacion general
        jTable_productos.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int fila_point = jTable_productos.rowAtPoint(e.getPoint());
                int columna_point = 0;

                if (fila_point > -1) {
                    idProducto = (int) model.getValueAt(fila_point, columna_point);
                    EnviarDatosProductoSeleccionado(idProducto);//metodo
                }
            }
        });*/
    double precio = 0.0;
    int porcentajeIva = 0;
    double IVA = 0;

    private void CargarTablaProductos() {
        DefaultTableModel model = new DefaultTableModel();
        InterVisualizarProducto.jTable_productos = new JTable(model);
        InterVisualizarProducto.jScrollPane1.setViewportView(InterVisualizarProducto.jTable_productos);

        model.addColumn("N°");//ID
        model.addColumn("nombre");
        model.addColumn("cantidad");
        model.addColumn("precio");
        model.addColumn("descripcion");
        model.addColumn("Iva");
        model.addColumn("Categoria");
        model.addColumn("estado");

        List<Producto> productos = ctrl_Producto_Visualizar.obtenerProductos();

        for (Producto producto : productos) {
            Object fila[] = new Object[8];
            fila[0] = producto.getIdProducto();
            fila[1] = producto.getNombre();
            fila[2] = producto.getCantidad();
            fila[3] = producto.getPrecio();
            fila[4] = producto.getDescripcion();
            fila[5] = IVA = this.calcularIva(producto.getPrecio(), producto.getPorcentajeIva());
            System.out.println("GGGG"+producto.getIdCategoria());
            fila[6] = ctrl_Producto_Visualizar.obtenerNombreCategoria(producto.getIdCategoria());
            fila[7] = producto.getEstado();
            model.addRow(fila);
        }
    }

    /*
     * **************************************************
     * Metodo para calcular Iva
     * **************************************************
     */
    private double calcularIva(double precio, int iva) {
        int p_iva = iva;
        switch (p_iva) {
            case 0 ->
                IVA = 0.0;
            case 12 ->
                IVA = precio * 0.12;
            case 14 ->
                IVA = precio * 0.14;
            default -> {
            }
        }
        //redondear decimales
        IVA = (double) Math.round(IVA * 100) / 100;
        return IVA;
    }

    /*
     * **************************************************
     * Metodo que envia datos seleccionados
     * **************************************************
     */
 /*
    private void EnviarDatosProductoSeleccionado(int idProducto) {
        try {
            try ( Connection con = Conexion.Conexion()) {
                PreparedStatement pst = con.prepareStatement(
                        "select * from tb_producto where idProducto = '" + idProducto + "'");
                ResultSet rs = pst.executeQuery();
                if (rs.next()) {
                    txt_nombre.setText(rs.getString("nombre"));
                    txt_cantidad.setText(rs.getString("cantidad"));
                    txt_precio.setText(rs.getString("precio"));
                    txt_descripcion.setText(rs.getString("descripcion"));
                    int iva = rs.getInt("porcentajeIva");
                    switch (iva) {
                        case 0 ->
                            jComboBox_iva.setSelectedItem("No grava iva");
                        case 12 ->
                            jComboBox_iva.setSelectedItem("12%");
                        case 14 ->
                            jComboBox_iva.setSelectedItem("14%");
                        default ->
                            jComboBox_iva.setSelectedItem("Seleccione iva:");
                    }
                    int idCate = rs.getInt("idCategoria");
                    jComboBox_categoria.setSelectedItem(relacionarCategoria(idCate));
                }
            }
        } catch (SQLException e) {
            System.out.println("Error al seleccionar producto: " + e);
        }
    }*/

 /*
     * **************************************************
     * Metodo para relacionar categorias
     * **************************************************
     */
 /*
    private String relacionarCategoria(int idCategoria) {

        String sql = "select descripcion from tb_categoria where idCategoria = '" + idCategoria + "'";
        Statement st;
        try {
            try ( Connection cn = Conexion.Conexion()) {
                st = cn.createStatement();
                ResultSet rs = st.executeQuery(sql);
                while (rs.next()) {
                    descripcionCategoria = rs.getString("descripcion");
                }
            }

        } catch (SQLException e) {
            System.out.println("¡Error al obtener el id de la categoria!");
        }
        return descripcionCategoria;
    }
     */
    /**
     *
     * Metodo para obtener id categoria
     */
    /*
    private int IdCategoria() {
        String sql = "select * from tb_categoria where descripcion = '" + this.jComboBox_categoria.getSelectedItem() + "'";
        Statement st;
        try {
            Connection cn = Conexion.Conexion();
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                obtenerIdCategoriaCombo = rs.getInt("idCategoria");
            }
        } catch (SQLException e) {
            System.out.println("Error al obener id categoria");
        }
        return obtenerIdCategoriaCombo;
    }
     */
}

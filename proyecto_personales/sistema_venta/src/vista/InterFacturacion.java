package vista;

import com.mysql.jdbc.Connection;
import com.mysql.jdbc.Statement;
import controlador.Ctrl_Facturacion;
import controlador.Venta_PDF;
import java.awt.Dimension;
import static java.awt.image.ImageObserver.WIDTH;
import javax.swing.Icon;
import java.sql.SQLException;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelo.CabeceraVenta;
import modelo.DetalleVenta;

/**
 *
 * @author Guicho
 */
public class InterFacturacion extends javax.swing.JInternalFrame {

    private DefaultTableModel modeloDatosProductos;
    //Lista para el detalle venta de los productos
    ArrayList<DetalleVenta> listaProducto = new ArrayList<>();
    private DetalleVenta producto;

    private int idCliente  = 0;//Id del cliente seleccionado
    
    private int idProducto = 0;
    private String nombre = "";
    private int cantidadProductoBD = 0;//Cantidad de productos registrados en la BD
    private double precioUnitario = 0.0;
    private int porcentajeIva = 0;

    private int cantidad = 0;//Cantidad  de productos a comprar
    private double subtotal = 0.0;//Cantidad por precio
    private double descuento = 0.0;
    private double iva = 0.0;
    private double totalPagar = 0.0;

    //Variables para el método calcularTotalPagar
    private double subtotalGeneral = 0.0;
    private double descuentoGeneral = 0.0;
    private double ivaGeneral = 0.0;
    private double totalPagarGeneral = 0.0;

    private int auxIdDetalleVenta = 1;//Auxiliar  del id de detalle venta

    public InterFacturacion() {
        initComponents();
        this.setSize(new Dimension(800, 600));
        this.setTitle("Facturazión");
        //Cargar clientes en la vista
        this.cargarCliente();
        //Cargar productos en la vista
        this.cargarProducto();
        //Cargar tablaProducto
        this.inicializarTablaProducto();

        txt_efectivo.setEnabled(false);
        jButton_calcular_cambio.setEnabled(false);
        txt_subtotal.setText("0.0");
        txt_iva.setText("0.0");
        txt_descuento.setText("0.0");
        txt_total_a_pagar.setText("0.0");

        ImageIcon wallpaper = new ImageIcon("src/img/fondo3.jpg");
        Icon icono = new ImageIcon(wallpaper.getImage().getScaledInstance(800, 600, WIDTH));
        jLabel_wallpaper.setIcon(icono);
        this.repaint();
    }

    private void inicializarTablaProducto() {
        modeloDatosProductos = new DefaultTableModel();

        //Añadir columnas
        modeloDatosProductos.addColumn("N");
        modeloDatosProductos.addColumn("Nombre");
        modeloDatosProductos.addColumn("Cantidad");
        modeloDatosProductos.addColumn("P Unitario");
        modeloDatosProductos.addColumn("Subtotal");
        modeloDatosProductos.addColumn("Descuento");
        modeloDatosProductos.addColumn("IVA");
        modeloDatosProductos.addColumn("Total a pagar");
        modeloDatosProductos.addColumn("Acción");
        //Agregar datos del modelo a la tabla
        InterFacturacion.jTable_producto.setModel(modeloDatosProductos);
    }

    //Método para presentar información del nuevo producto
    private void listaTablaProductos() {
        this.modeloDatosProductos.setRowCount(listaProducto.size());

        for (int i = 0; i < listaProducto.size(); i++) {
            this.modeloDatosProductos.setValueAt(i + 1, i, 0);
            this.modeloDatosProductos.setValueAt(listaProducto.get(i).getNombre(), i, 1);
            this.modeloDatosProductos.setValueAt(listaProducto.get(i).getCantidad(), i, 2);
            this.modeloDatosProductos.setValueAt(listaProducto.get(i).getPrecioUnitario(), i, 3);
            this.modeloDatosProductos.setValueAt(listaProducto.get(i).getSubTotal(), i, 4);
            this.modeloDatosProductos.setValueAt(listaProducto.get(i).getDescuento(), i, 5);
            this.modeloDatosProductos.setValueAt(listaProducto.get(i).getIva(), i, 6);
            this.modeloDatosProductos.setValueAt(listaProducto.get(i).getTotalPagar(), i, 7);
            this.modeloDatosProductos.setValueAt("Eliminar", i, 8);//Botón de eliminar
        }

        //Añadir al JTable
        jTable_producto.setModel(modeloDatosProductos);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jComboBox_cliente = new javax.swing.JComboBox<>();
        jComboBox_producto = new javax.swing.JComboBox<>();
        txt_cliente_buscar = new javax.swing.JTextField();
        txt_cantidad = new javax.swing.JTextField();
        jButton_busca_cliente = new javax.swing.JButton();
        jButton_anadir_producto = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_producto = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txt_subtotal = new javax.swing.JTextField();
        txt_descuento = new javax.swing.JTextField();
        txt_iva = new javax.swing.JTextField();
        txt_total_a_pagar = new javax.swing.JTextField();
        txt_efectivo = new javax.swing.JTextField();
        txt_cambio = new javax.swing.JTextField();
        jButton_calcular_cambio = new javax.swing.JButton();
        jButton_registrar_venta = new javax.swing.JButton();
        jLabel_wallpaper = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Facturación");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 0, -1, -1));

        jLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Producto:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 80, -1));

        jLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Cantidad:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 80, 80, -1));

        jLabel4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Cliente:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 80, -1));

        jComboBox_cliente.setBackground(new java.awt.Color(92, 20, 185));
        jComboBox_cliente.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jComboBox_cliente.setForeground(new java.awt.Color(255, 255, 255));
        jComboBox_cliente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione cliente:", "Item 2", "Item 3", "Item 4" }));
        getContentPane().add(jComboBox_cliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 40, 170, -1));

        jComboBox_producto.setBackground(new java.awt.Color(92, 20, 185));
        jComboBox_producto.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jComboBox_producto.setForeground(new java.awt.Color(255, 255, 255));
        jComboBox_producto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione producto:", "Item 2", "Item 3", "Item 4" }));
        jComboBox_producto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_productoActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox_producto, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 80, 170, -1));

        txt_cliente_buscar.setBackground(new java.awt.Color(46, 74, 133));
        txt_cliente_buscar.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        txt_cliente_buscar.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(txt_cliente_buscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 40, 150, 22));

        txt_cantidad.setBackground(new java.awt.Color(46, 74, 133));
        txt_cantidad.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        txt_cantidad.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(txt_cantidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 80, 60, 22));

        jButton_busca_cliente.setBackground(new java.awt.Color(108, 68, 24));
        jButton_busca_cliente.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButton_busca_cliente.setForeground(new java.awt.Color(255, 255, 255));
        jButton_busca_cliente.setText("Buscar");
        jButton_busca_cliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_busca_clienteActionPerformed(evt);
            }
        });
        getContentPane().add(jButton_busca_cliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 40, 80, -1));

        jButton_anadir_producto.setBackground(new java.awt.Color(108, 68, 24));
        jButton_anadir_producto.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButton_anadir_producto.setForeground(new java.awt.Color(255, 255, 255));
        jButton_anadir_producto.setText("Añadir");
        jButton_anadir_producto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_anadir_productoActionPerformed(evt);
            }
        });
        getContentPane().add(jButton_anadir_producto, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 80, 80, -1));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable_producto.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable_producto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_productoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable_producto);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 740, 190));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, 760, 210));

        jPanel2.setBackground(new java.awt.Color(55, 101, 147));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel5.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Subtotal");
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        jLabel6.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Descuento");
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, -1, -1));

        jLabel7.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("IVA");
        jPanel2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, -1, -1));

        jLabel8.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Total a pagar");
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, -1, -1));

        jLabel9.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Efectivo");
        jPanel2.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, -1, -1));

        jLabel10.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Cambio");
        jPanel2.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 180, -1, -1));

        txt_subtotal.setEditable(false);
        txt_subtotal.setBackground(new java.awt.Color(147, 93, 26));
        txt_subtotal.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jPanel2.add(txt_subtotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 15, 120, 25));

        txt_descuento.setEditable(false);
        txt_descuento.setBackground(new java.awt.Color(147, 93, 26));
        txt_descuento.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jPanel2.add(txt_descuento, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 45, 120, 25));

        txt_iva.setEditable(false);
        txt_iva.setBackground(new java.awt.Color(147, 93, 26));
        txt_iva.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jPanel2.add(txt_iva, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 75, 120, 25));

        txt_total_a_pagar.setEditable(false);
        txt_total_a_pagar.setBackground(new java.awt.Color(147, 93, 26));
        txt_total_a_pagar.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jPanel2.add(txt_total_a_pagar, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 105, 120, 25));

        txt_efectivo.setBackground(new java.awt.Color(147, 93, 26));
        txt_efectivo.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jPanel2.add(txt_efectivo, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 145, 120, 25));

        txt_cambio.setEditable(false);
        txt_cambio.setBackground(new java.awt.Color(147, 93, 26));
        txt_cambio.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jPanel2.add(txt_cambio, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 175, 120, 25));

        jButton_calcular_cambio.setBackground(new java.awt.Color(150, 47, 44));
        jButton_calcular_cambio.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButton_calcular_cambio.setForeground(new java.awt.Color(255, 255, 255));
        jButton_calcular_cambio.setText("Calcular cambio");
        jButton_calcular_cambio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_calcular_cambioActionPerformed(evt);
            }
        });
        jPanel2.add(jButton_calcular_cambio, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 175, -1, 25));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 340, 380, 220));

        jButton_registrar_venta.setBackground(new java.awt.Color(95, 185, 134));
        jButton_registrar_venta.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButton_registrar_venta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/impresora.png"))); // NOI18N
        jButton_registrar_venta.setText("Resgistrar venta");
        jButton_registrar_venta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_registrar_ventaActionPerformed(evt);
            }
        });
        getContentPane().add(jButton_registrar_venta, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 360, 290, 180));

        jLabel_wallpaper.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/fondo3.jpg"))); // NOI18N
        getContentPane().add(jLabel_wallpaper, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 800, 570));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox_productoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_productoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox_productoActionPerformed

    private void jButton_busca_clienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_busca_clienteActionPerformed
        // TODO add your handling code here:
        String cliente_buscar = txt_cliente_buscar.getText().trim();

        java.sql.Connection con = conexion.Conexion.Conexion();
        String sql = "select nombre,apellido from tb_cliente where cedula = '" + cliente_buscar + "'";
        Statement st;

        try {
            st = (Statement) con.createStatement();
            ResultSet rs = st.executeQuery(sql);

            if (rs.next()) {
                jComboBox_cliente.setSelectedItem(rs.getString("nombre") + " " + rs.getString("apellido"));
                txt_cliente_buscar.setText("");
            } else {
                jComboBox_cliente.setSelectedItem("Seleccione cliente:");
                JOptionPane.showMessageDialog(null, "Cedula del cliente incorrecta o no encontrada");
            }

            txt_cliente_buscar.setText("");
            con.close();

        } catch (SQLException e) {
            System.out.println("Error al  buscar cliente " + e);
        }
    }//GEN-LAST:event_jButton_busca_clienteActionPerformed

    private void jButton_anadir_productoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_anadir_productoActionPerformed
        // TODO add your handling code here:
        String combo = this.jComboBox_producto.getSelectedItem().toString();
        //Validar selección de un producto
        if (combo.equalsIgnoreCase("Seleccione producto:")) {
            JOptionPane.showMessageDialog(null, "Seleccione un producto");
        } else {
            //Validar que ingrese una cantidad
            if (!txt_cantidad.getText().isEmpty()) {
                //Validar el no ingreso de caracteres no númericos
                boolean validacion = validar(txt_cantidad.getText().trim());

                if (validacion) {
                    //Validar que cantidad mayor a cero
                    if (Integer.parseInt(txt_cantidad.getText()) >= 0) {
                        cantidad = Integer.parseInt(txt_cantidad.getText().trim());
                        //Ejecutar método para mostrar los datos del producto en la tabla
                        this.mostrarDatosDelProducto();

                        //Validar cantidad de productos seleccionados no sea mayor al del stock de la BD
                        if (cantidad >= cantidadProductoBD) {

                            subtotal = precioUnitario * cantidad;
                            totalPagar = subtotal + iva + descuento;

                            //Redondear decimales
                            subtotal = (double) Math.round(subtotal * 100) / 100;
                            iva = (double) Math.round(iva * 100) / 100;
                            descuento = (double) Math.round(descuento * 100) / 100;
                            totalPagar = (double) Math.round(totalPagar * 100) / 100;

                            //Se crea un nuevo producto
                            producto = new DetalleVenta(auxIdDetalleVenta,
                                    1,//idCabeceraVenta
                                    idProducto,
                                    nombre,
                                    Integer.parseInt(txt_cantidad.getText().trim()),
                                    precioUnitario,
                                    subtotal,
                                    descuento,
                                    iva,
                                    totalPagar,
                                    1
                            );//Estado

                            //Añadir a la lista
                            listaProducto.add(producto);
                            JOptionPane.showMessageDialog(null, "Producto agregado correctamente");
                            auxIdDetalleVenta++;
                            txt_cantidad.setText("");//Limpiar el campo cantidad
                            //Volver a cargar la tabla de productos                        
                            this.listaTablaProductos();
                            this.calcularTotalPagar();
                            txt_efectivo.setEnabled(true);
                            jButton_calcular_cambio.setEnabled(true);

                        } else {
                            JOptionPane.showMessageDialog(null, "La cantidad supera al stock");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Ingrese una cantidad válida");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Solo se aceptan números");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Ingrese una cantidad");
            }
        }

        //Llamar al método

    }//GEN-LAST:event_jButton_anadir_productoActionPerformed

    private void jButton_calcular_cambioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_calcular_cambioActionPerformed
        // TODO add your handling code here:
        if (!txt_efectivo.getText().isEmpty()) {
            //Validamos el ingreso de solo datos númericos
            boolean validacion = validarDouble(txt_efectivo.getText().trim());
            if (validacion) {
                //Validar que sea mayor a cero y solo positivo
                double efc = Double.parseDouble(txt_efectivo.getText().trim());
                double pagar = Double.parseDouble(txt_total_a_pagar.getText().trim());

                if (efc < pagar) {
                    JOptionPane.showMessageDialog(null, "Dinero insuficiente para realizar la compra");
                } else {
                    double cambio = (double) Math.round(((efc - pagar) * 100) / 100);
                    String pagarCambio = String.valueOf(cambio);
                    txt_cambio.setText(pagarCambio);
                }

            } else {
                JOptionPane.showMessageDialog(null, "Solo se aceptan numeros");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Ingrese una cantidad");
        }
    }//GEN-LAST:event_jButton_calcular_cambioActionPerformed
int idArrayList = 0;
    private void jTable_productoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_productoMouseClicked
        // TODO add your handling code here:       
        int fila_point = jTable_producto.rowAtPoint(evt.getPoint());
        int columna_point = 0;

        if (fila_point > -1) {
            idArrayList = (int) modeloDatosProductos.getValueAt(fila_point, columna_point);
        }

        int opcion = JOptionPane.showConfirmDialog(null, "¿Eliminar producto?");
        //Opciones de confirm dialog : (si = 0); (no = 1); (cancel = 2); (close = -1)

        switch (opcion) {
            case 0 :
                //Presiona SI
                listaProducto.remove(idArrayList - 1);
                this.calcularTotalPagar();
                this.listaTablaProductos();
                break;
            
            case 1 :
                break;
            
            default :
                    break;
            
        }
        //Presione NO


    }//GEN-LAST:event_jTable_productoMouseClicked

    private void jButton_registrar_ventaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_registrar_ventaActionPerformed
        // TODO add your handling code here:
        CabeceraVenta cabeceraVenta = new CabeceraVenta();
        DetalleVenta detalleVenta = new DetalleVenta();
        Ctrl_Facturacion ctrl_Facturacion = new Ctrl_Facturacion();

        String fechaActual = "";
        Date date = new Date();
        fechaActual = new SimpleDateFormat("yyyy-MM-dd").format(date);

        if (!jComboBox_cliente.getSelectedItem().equals("Seleccione cliente:")) {
            if (!listaProducto.isEmpty()) {

                //Método para obtener el idCliente
                
                this.obtenerIdCliente();
                //Registrar la cabecera
                cabeceraVenta.setIdCabeceraVenta(0);
                cabeceraVenta.setIdCliente(idCliente);
                cabeceraVenta.setValorPagar(Double.parseDouble(txt_total_a_pagar.getText().trim()));
                cabeceraVenta.setFechaVeta(fechaActual);
                cabeceraVenta.setEstado(1);
                
                if(ctrl_Facturacion.guardarCabeceraVenta(cabeceraVenta)){
                    JOptionPane.showMessageDialog(null, "Cabecera registrada");
                    
                    //Generar la factura de venta
                    Venta_PDF pdf = new Venta_PDF();
                    pdf.datosCliente(idCliente);
                    pdf.generarFacturaPdf();
                    
                    //Guardar detalle
                    for(DetalleVenta objeto: listaProducto){
                        detalleVenta.setIdDetalleVenta(0);
                        detalleVenta.setIdCabeceraVenta(0);
                        detalleVenta.setIdProducto(objeto.getIdProducto());
                        detalleVenta.setCantidad(objeto.getCantidad());
                        detalleVenta.setPrecioUnitario(objeto.getPrecioUnitario());
                        detalleVenta.setSubTotal(objeto.getSubTotal());
                        detalleVenta.setDescuento(objeto.getDescuento());
                        detalleVenta.setIva(objeto.getIva());
                        detalleVenta.setTotalPagar(objeto.getTotalPagar());
                        detalleVenta.setEstado(1);
                    
                        if(ctrl_Facturacion.guardarDetalleVenta(detalleVenta)){
                            //System.out.println("Detalle de venta registrado ");
                            txt_subtotal.setText("");
                            txt_iva.setText("");
                            txt_descuento.setText("");
                            txt_total_a_pagar.setText("");
                            txt_cambio.setText("");
                            txt_efectivo.setText("");
                            auxIdDetalleVenta = 1;//Se reinicia la variable
                            
                            this.cargarCliente();
                            this.cargarProducto();
                            this.restarStockProductos(objeto.getIdProducto(),objeto.getCantidad());
                            
                        }else{
                            JOptionPane.showMessageDialog(null, "Eror al guardar detalle venta");
                        }
                    }
                    //Vaciamos la lista
                    listaProducto.clear();
                    listaTablaProductos();
                }else{
                    JOptionPane.showMessageDialog(null, "Error al guardar cabecera de venta");
                }
                
            } else {
                JOptionPane.showMessageDialog(null, "Seleccione un producto");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Seleccione un cliente");
        }
    }//GEN-LAST:event_jButton_registrar_ventaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_anadir_producto;
    private javax.swing.JButton jButton_busca_cliente;
    private javax.swing.JButton jButton_calcular_cambio;
    private javax.swing.JButton jButton_registrar_venta;
    private javax.swing.JComboBox<String> jComboBox_cliente;
    private javax.swing.JComboBox<String> jComboBox_producto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabel_wallpaper;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    public static javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTable jTable_producto;
    private javax.swing.JTextField txt_cambio;
    private javax.swing.JTextField txt_cantidad;
    private javax.swing.JTextField txt_cliente_buscar;
    private javax.swing.JTextField txt_descuento;
    private javax.swing.JTextField txt_efectivo;
    private javax.swing.JTextField txt_iva;
    private javax.swing.JTextField txt_subtotal;
    public static javax.swing.JTextField txt_total_a_pagar;
    // End of variables declaration//GEN-END:variables

    //Método para cargar clientes en comboBox
    private void cargarCliente() {

        java.sql.Connection con = conexion.Conexion.Conexion();
        String sql = "select * from tb_cliente";
        Statement st;

        try {
            st = (Statement) con.createStatement();
            ResultSet rs = st.executeQuery(sql);
            jComboBox_cliente.removeAllItems();
            jComboBox_cliente.addItem("Seleccione cliente:");

            while (rs.next()) {
                jComboBox_cliente.addItem(rs.getString("nombre") + " " + rs.getString("apellido"));
            }

            con.close();
        } catch (SQLException e) {
            System.out.println("Eror al cargar cliente " + e);
        }
    }

    //Método para cargar los productos en comboBox
    private void cargarProducto() {

        java.sql.Connection con = conexion.Conexion.Conexion();
        String sql = "select * from tb_producto";
        Statement st;

        try {
            st = (Statement) con.createStatement();
            ResultSet rs = st.executeQuery(sql);
            jComboBox_producto.removeAllItems();
            jComboBox_producto.addItem("Seleccione producto:");

            while (rs.next()) {
                jComboBox_producto.addItem(rs.getString("nombre"));
            }

            con.close();
        } catch (SQLException e) {
            System.out.println("Eror al cargar producto " + e);
        }
    }

    //Validar para no permitir el ingreso de caracteres no númericos
    private boolean validar(String valor) {

        try {
            int num = Integer.parseInt(valor);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    //Validar para no permitir el ingreso de caracteres no númericos
    private boolean validarDouble(String valor) {

        try {
            double num = Double.parseDouble(valor);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    //Método para mostrar los datos del producto en la tabla
    private void mostrarDatosDelProducto() {

        try {
            String sql = "select * from tb_producto where nombre = '" + this.jComboBox_producto.getSelectedItem() + "' ";
            java.sql.Connection con = conexion.Conexion.Conexion();
            Statement st;
            st = (Statement) con.createStatement();
            ResultSet rs = st.executeQuery(sql);

            while (rs.next()) {
                idProducto = rs.getInt("idProducto");
                nombre = rs.getString("nombre");
                cantidadProductoBD = rs.getInt("cantidad");
                precioUnitario = rs.getDouble("precio");
                porcentajeIva = rs.getInt("porcentajeIva");
                this.calcularIva(precioUnitario, porcentajeIva);//Calculando y retornando el IVA

            }
        } catch (SQLException e) {
            System.out.println("Error al obtener datos del producto " + e);
        }
    }

    //Método para calcular el iva
    private double calcularIva(double precioUnitario, int porcentajeIva) {
        int p_iva = porcentajeIva;

        switch (p_iva) {
            case 0 ->
                iva = 0.0;
            case 12 ->
                iva = (precioUnitario * cantidad) * 0.12;
            case 14 ->
                iva = (precioUnitario * cantidad) * 0.14;
            default -> {
            }
        }

        return iva;
    }

    //Método para calcular los cálculos finales
    private void calcularTotalPagar() {
        subtotalGeneral = 0.0;
        descuentoGeneral = 0.0;
        ivaGeneral = 0.0;
        totalPagarGeneral = 0.0;

        for (DetalleVenta calculos : listaProducto) {
            subtotalGeneral += calculos.getSubTotal();
            descuentoGeneral += calculos.getDescuento();
            ivaGeneral += calculos.getIva();
            totalPagarGeneral += calculos.getTotalPagar();
        }

        //Redondear decimal
        subtotalGeneral = (double) Math.round(subtotalGeneral * 100) / 100;
        descuentoGeneral = (double) Math.round(descuentoGeneral * 100) / 100;
        ivaGeneral = (double) Math.round(ivaGeneral * 100) / 100;
        totalPagarGeneral = (double) Math.round(totalPagarGeneral * 100) / 100;

        //Enviar datos a la vista
        txt_subtotal.setText(String.valueOf(subtotalGeneral));
        txt_descuento.setText(String.valueOf(descuentoGeneral));
        txt_iva.setText(String.valueOf(ivaGeneral));
        txt_total_a_pagar.setText(String.valueOf(totalPagarGeneral));
    }

    //Método para obtener el idCliente
    private void obtenerIdCliente() {

        try {
            Connection con = (Connection) conexion.Conexion.Conexion();
            String sql = "select * from tb_cliente where concat(nombre, ' ', apellido) = '" + this.jComboBox_cliente.getSelectedItem() + "'";
            Statement st;
            st = (Statement) con.createStatement();
            ResultSet rs  = st.executeQuery(sql);
            
            while(rs.next()){
                idCliente  = rs.getInt("idCliente");
                
            }
        } catch (SQLException e) {
            System.out.println("Error al obtener el dic del cliente " + e);
        }
    }
    
    //Método para restar stock en la BD
    private void restarStockProductos(int idProducto, int cantidad){
        int cantidadProductosBD = 0;
        
        try {
                Connection con = (Connection) conexion.Conexion.Conexion();
                String sql = "select idProducto, cantidad from tb_producto where idProducto = '"+idProducto+"'";
                Statement st;
                st = (Statement)con.createStatement();
                ResultSet rs = st.executeQuery(sql);
                
                while(rs.next()){
                    cantidadProductosBD = rs.getInt("cantidad");
                }
            
        } catch (SQLException e) {
            System.out.println("Erro al restar la cantidad de stock");
        }
        
        try {
            Connection con = (Connection) conexion.Conexion.Conexion();
                java.sql.PreparedStatement pst = con.prepareStatement("update tb_producto set cantidad  = ? where idProducto ='"+idProducto+"'");
                int cantidadNueva = cantidadProductosBD - cantidad;
                pst.setInt(1, cantidadNueva);
                
                if(pst.executeUpdate() > 0){
                    System.out.println("Actualizado correctamente");
                }
            
        } catch (SQLException e) {
            System.out.println("Error al restar la cantidad en la BD");
        }
    }
}

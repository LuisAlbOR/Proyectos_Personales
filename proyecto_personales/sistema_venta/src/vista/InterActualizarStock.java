package vista;

import com.mysql.jdbc.Statement;
import controlador.producto.Ctrl_Producto;
import java.awt.Dimension;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import modelo.producto.Producto;

/**
 *
 * @author Guicho
 */
public class InterActualizarStock extends javax.swing.JInternalFrame {

    //Variables  globales
    int idProducto = 0;
    int cantidad = 0;

    public InterActualizarStock() {
        initComponents();
        this.setTitle("Actualizar stock de los productos");
        this.setSize(new Dimension(400, 300));
        this.cargarComboProductos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txt_stock_actual = new javax.swing.JTextField();
        txt_stock_nuevo = new javax.swing.JTextField();
        jComboBox_producto = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jLabel_wallpaper = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Actualizar stock");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 20, -1, -1));

        jLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Producto");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 60, -1, -1));

        jLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Stock actual");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 110, -1, -1));

        jLabel4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Stock nuevo");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 160, -1, -1));

        txt_stock_actual.setEditable(false);
        txt_stock_actual.setBackground(new java.awt.Color(18, 69, 165));
        txt_stock_actual.setForeground(new java.awt.Color(102, 255, 255));
        getContentPane().add(txt_stock_actual, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 100, 170, 30));

        txt_stock_nuevo.setBackground(new java.awt.Color(18, 69, 165));
        txt_stock_nuevo.setForeground(new java.awt.Color(102, 255, 255));
        getContentPane().add(txt_stock_nuevo, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 150, 170, 30));

        jComboBox_producto.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBox_producto.setForeground(new java.awt.Color(255, 255, 255));
        jComboBox_producto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione producto:", "Item 2", "Item 3", "Item 4" }));
        jComboBox_producto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_productoActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox_producto, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 50, 170, 30));

        jButton1.setBackground(new java.awt.Color(63, 64, 157));
        jButton1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButton1.setText("Actualizar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 200, 170, 30));

        jLabel_wallpaper.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/fondo3.jpg"))); // NOI18N
        getContentPane().add(jLabel_wallpaper, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 390, 268));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox_productoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_productoActionPerformed
        // TODO add your handling code here:
        this.mostrarStock();
    }//GEN-LAST:event_jComboBox_productoActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        //Valida seleccion de un producto
        if (!jComboBox_producto.getSelectedItem().equals("Seleccione producto:")) {
            //Valida campos vacio del stock nuevo
            if (!txt_stock_nuevo.getText().isEmpty()) {
                //Valida el no ingreso de datos no númericos
                boolean validacion = metodoValidar(txt_stock_nuevo.getText().trim());
                if (validacion == true) {
                    //Valida la cantidad sea mayor a cero
                    if (Integer.parseInt(txt_stock_nuevo.getText().trim()) > 0) {
                        
                        Producto producto = new Producto();
                        Ctrl_Producto ctrl_Producto = new Ctrl_Producto();
                        int stockActual = Integer.parseInt(txt_stock_actual.getText().trim());
                        int stockNuevo = Integer.parseInt(txt_stock_nuevo.getText().trim());
                        
                        stockNuevo = stockActual + stockNuevo;
                        producto.setCantidad(stockNuevo);
                        
                        if(ctrl_Producto.actualizarStock(producto, idProducto)){
                            JOptionPane.showMessageDialog(null, "Stock actualizado correctamente");
                            //jComboBox_producto.setSelectedItem("Seleccione producto:");
                            txt_stock_actual.setText("");
                            txt_stock_nuevo.setText("");
                            this.cargarComboProductos();
                        }else{
                            JOptionPane.showMessageDialog(null, "Error al actualizar stock");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Por favor de ingresar numeros mayores a 0");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "No se aceptan datos no numericos");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Ingrese una cantidad");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Seleccione un producto");
        }
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox_producto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel_wallpaper;
    private javax.swing.JTextField txt_stock_actual;
    private javax.swing.JTextField txt_stock_nuevo;
    // End of variables declaration//GEN-END:variables

    //Método para cargar productos en el comboBox
    private void cargarComboProductos() {
        Connection con = conexion.Conexion.Conexion();
        String sql = "select * from tb_producto";
        Statement st;

        try {
            st = (Statement) con.createStatement();
            ResultSet rs = st.executeQuery(sql);
            jComboBox_producto.removeAllItems();
            jComboBox_producto.addItem("Seleccione producto:");

            while (rs.next()) {
                jComboBox_producto.addItem(rs.getString("nombre"));
            }
        } catch (SQLException e) {
            System.out.println("Error al cargar productos en " + e);
        }
    }

    //Método para mostrar el stock del producto seleccionado
    private void mostrarStock() {

        try {
            Connection con = conexion.Conexion.Conexion();
            String sql = "select * from tb_producto where nombre = '" + this.jComboBox_producto.getSelectedItem() + "'";
            Statement st;
            st = (Statement) con.createStatement();
            ResultSet rs = st.executeQuery(sql);

            if (rs.next()) {
                idProducto = rs.getInt("idProducto");
                cantidad = rs.getInt("cantidad");
                txt_stock_actual.setText(String.valueOf(cantidad));
            } else {
                txt_stock_actual.setText("");
            }
        } catch (SQLException e) {
            System.out.println("Error al obtener el stock en " + e);
        }
    }

    //Método de validación de caracteres no numericos
    private boolean metodoValidar(String valor) {
        int num;
        try {
            num = Integer.parseInt(valor);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }
}

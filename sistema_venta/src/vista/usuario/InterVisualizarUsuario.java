package vista.usuario;

import java.awt.Dimension;
import java.util.List;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.table.DefaultTableModel;
import modelo.usuario.Usuario;
import modelo.usuario.UsuarioDAO_ObteneImp;
import modelo.usuario.usuarioDAO_ObtenerUsuarios;

/**
 *
 * @author Guicho
 */
public class InterVisualizarUsuario extends javax.swing.JInternalFrame {

    private final int idUsuario = 0;
    private final usuarioDAO_ObtenerUsuarios obtenerUsuarios = new UsuarioDAO_ObteneImp();

    public InterVisualizarUsuario() {
        initComponents();
        this.setSize(new Dimension(900, 500));
        this.setTitle("Gestionar usuarios");
        //Cargar tabla
        this.CargarTablaUsuarios();

        //insertar imagen en nuestro JLabel
        ImageIcon wallpaper = new ImageIcon("src/img/fondo3.jpg");
        Icon icono = new ImageIcon(wallpaper.getImage().getScaledInstance(900, 500, WIDTH));
        jLabel_wallpaper.setIcon(icono);
        this.repaint();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_usuario = new javax.swing.JTable();
        jLabel_wallpaper = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Administrar Usuario");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 20, -1, -1));

        jPanel1.setBackground(new java.awt.Color(195, 139, 11));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable_usuario.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable_usuario);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 710, 250));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 70, 730, 270));
        getContentPane().add(jLabel_wallpaper, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 890, 470));

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel_wallpaper;
    private javax.swing.JPanel jPanel1;
    public static javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTable jTable_usuario;
    // End of variables declaration//GEN-END:variables

    //Método para limpiar campos
    /*private void Limpiar() {
        txt_nombre.setText("");
        txt_password.setText("");
        txt_apellido.setText("");
        txt_telefono.setText("");
        txt_usuario.setText("");
    }*/

    //Método para mostrar todos los usuario registrados
    /*
    private void CargarTablaUsuarios() {
        Connection con = Conexion.Conexion();
        DefaultTableModel model = new DefaultTableModel();
        String sql = "select * from tb_usuarios";
        Statement st;
        try {
            st = con.createStatement();
            ResultSet rs = st.executeQuery(sql);
            InterVisualizarUsuario.jTable_usuario = new JTable(model);
            InterVisualizarUsuario.jScrollPane1.setViewportView(InterVisualizarUsuario.jTable_usuario);

            model.addColumn("N°");//ID
            model.addColumn("nombre");
            model.addColumn("apellido");
            model.addColumn("usuario");
            model.addColumn("password");
            model.addColumn("telefono");
            model.addColumn("estado");

            while (rs.next()) {
                Object fila[] = new Object[7];
                for (int i = 0; i < 7; i++) {

                    fila[i] = rs.getObject(i + 1);

                }
                model.addRow(fila);
            }
            con.close();
        } catch (SQLException e) {
            System.out.println("Error al llenar la tabla usuarios: " + e);
        }
        //evento para obtener campo al cual el usuario da click
        //y obtener la interfaz que mostrara la informacion general
        
             jTable_usuario.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int fila_point = jTable_usuario.rowAtPoint(e.getPoint());
                int columna_point = 0;

                if (fila_point > -1) {
                    idUsuario = (int) model.getValueAt(fila_point, columna_point);
                    EnviarDatosUsuarioSeleccionado(idUsuario);//metodo
                }
            }
        });
    }*/
//Método para cargar y mostrar todos los usuarios registrados en una tabla
    /*
        Connection con = Conexion.Conexion();
        DefaultTableModel model = new DefaultTableModel();
        String sql = "SELECT * FROM tb_usuarios";
        Statement st;
        try {
            st = con.createStatement();
            ResultSet rs = st.executeQuery(sql);
            InterVisualizarUsuario.jTable_usuario = new JTable(model);
            InterVisualizarUsuario.jScrollPane1.setViewportView(InterVisualizarUsuario.jTable_usuario);

            model.addColumn("N°");//ID
            model.addColumn("nombre");
            model.addColumn("apellido");
            model.addColumn("usuario");
            model.addColumn("password");
            model.addColumn("telefono");
            model.addColumn("estado");

            while (rs.next()) {
                Object fila[] = new Object[7];
                for (int i = 0; i < 7; i++) {
                    fila[i] = rs.getObject(i + 1);
                }
                model.addRow(fila);
            }
            con.close();
        } catch (SQLException e) {
            System.out.println("Error al llenar la tabla usuarios: " + e);
        }

        //Agregar evento de MouseListener a la tabla de usuarios
        AgregarEventoMouseListener(jTable_usuario, model);
    }
     */
    private void CargarTablaUsuarios() {
        DefaultTableModel model = new DefaultTableModel();
        InterVisualizarUsuario.jTable_usuario.setModel(model);
        InterVisualizarUsuario.jScrollPane1.setViewportView(InterVisualizarUsuario.jTable_usuario);

        model.addColumn("N°");//ID
        model.addColumn("nombre");
        model.addColumn("apellido");
        model.addColumn("usuario");
        model.addColumn("password");
        model.addColumn("telefono");
        model.addColumn("estado");

        List<Usuario> usuarios = obtenerUsuarios.obtenerUsuarios();
        for (Usuario usuario : usuarios) {
            Object fila[] = new Object[7];
            fila[0] = usuario.getIdUsuario();
            fila[1] = usuario.getNombre();
            fila[2] = usuario.getApellido();
            fila[3] = usuario.getUsuario();
            fila[4] = usuario.getPassword();
            fila[5] = usuario.getTelefono();
            fila[6] = usuario.getEstado();
            model.addRow(fila);
        }

        //Agregar evento de MouseListener a la tabla de usuarios
        //AgregarEventoMouseListener(InterVisualizarUsuario.jTable_usuario, model);
    }

//Método para agregar el evento de MouseListener a la tabla de usuarios
    /*private void AgregarEventoMouseListener(JTable tabla, DefaultTableModel model) {
        tabla.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int fila_point = tabla.rowAtPoint(e.getPoint());
                int columna_point = 0;

                if (fila_point > -1) {
                    idUsuario = (int) model.getValueAt(fila_point, columna_point);
                    EnviarDatosUsuarioSeleccionado(idUsuario);
                }
            }
        });
    }*/

    /*
     * **************************************************
     * Metodo que envia datos seleccionados
     * **************************************************
     */
 /*
    private void EnviarDatosUsuarioSeleccionado(int idUsuario) {
        try {
            try ( Connection con = Conexion.Conexion()) {
                PreparedStatement pst = con.prepareStatement(
                        "select * from tb_usuarios where idUsuario = '" + idUsuario + "'");
                ResultSet rs = pst.executeQuery();
                if (rs.next()) {
                    txt_nombre.setText(rs.getString("nombre"));
                    txt_apellido.setText(rs.getString("apellido"));
                    txt_usuario.setText(rs.getString("usuario"));
                    txt_password.setText(rs.getString("password"));
                    txt_telefono.setText(rs.getString("telefono"));
                }
            }
        } catch (SQLException e) {
            System.out.println("Error al seleccionar usuario: " + e);
        }
    }*/
    /*private void EnviarDatosUsuarioSeleccionado(int idUsuario) {
        Usuario usuario = usuarioDAO.obtenerDatosUsuario(idUsuario);
        if (usuario != null) {
            txt_nombre.setText(usuario.getNombre());
            txt_apellido.setText(usuario.getApellido());
            txt_usuario.setText(usuario.getUsuario());
            txt_password.setText(usuario.getPassword());
            txt_telefono.setText(usuario.getTelefono());
        }
    }*/

    /*public Usuario obtenerDatosUsuario() {
        Usuario usuario = new Usuario();
        usuario.setNombre(txt_nombre.getText().trim());
        usuario.setApellido(txt_apellido.getText().trim());
        usuario.setUsuario(txt_usuario.getText().trim());
        usuario.setPassword(txt_password.getText().trim());
        usuario.setTelefono(txt_telefono.getText().trim());
        usuario.setEstado(1);
        return usuario;
    }*/

}
